// /todo [1]
console.log(
    "%c [1] ",
    "color: yellow; background-color: #2274A5",
);
//? üî∏ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–∞–ª–µ—Ä–µ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å, —è–∫—É –º–æ–∂–Ω–∞ –ø—Ä–æ–≥–æ—Ä—Ç–∞—Ç–∏
//? –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª–∞–≤—ñ—à –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–ª—ñ–≤–æ / –≤–ø—Ä–∞–≤–æ)
let nextButton = document.querySelector('.next')
let prevButton = document.querySelector('.prev')
let imgSlader = document.querySelectorAll('li')
let arrOfImages = [...imgSlader]
for (let i = 0; i < arrOfImages.length; i++) {
    arrOfImages[i].style.order = i
}
let currentOrder = 0
nextButton.addEventListener('click' , function(){
    arrOfImages[currentOrder].style.order = currentOrder
    currentOrder = (currentOrder + 1) % arrOfImages.length
    if (currentOrder === 1){
        arrOfImages[0].style.order = 1
    }
    arrOfImages[currentOrder].style.order = 0
})
prevButton.addEventListener('click' , function(){
    if (currentOrder === 0){
        arrOfImages[arrOfImages.length - 1].style.order = 0
        arrOfImages[0].style.order = 1
    }
    currentOrder = (currentOrder - 1 + arrOfImages.length) % arrOfImages.length;
    if (arrOfImages[currentOrder + 1]) {
        arrOfImages[currentOrder + 1].style.order = currentOrder + 1;
    }
    arrOfImages[currentOrder].style.order = 0
})


//todo [2]
console.log(
    "%c [2] ",
    "color: yellow; background-color: #2274A5",
);
//? üî∏ –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
//? –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ input 
//? —ñ –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –°—Ç–≤–æ—Ä–∏—Ç–∏, –ø—ñ—Å–ª—è —á–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∫–æ–ª–µ–∫—Ü—ñ—è. 
//? –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—á–∏—Å—Ç–∏—Ç–∏, –∫–æ–ª–µ–∫—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –æ—á–∏—â–∞—î—Ç—å—Å—è.
//? üî∏ –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é createBoxes(amount), 
//? —è–∫–∞ –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä amount - —á–∏—Å–ª–æ.
//? –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î —Å—Ç—ñ–ª—å–∫–∏ div, 
//? —Å–∫—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω–æ –≤ amount —ñ –¥–æ–¥–∞—î —ó—Ö –≤ div#boxes.
//? üî∏ –ö–æ–∂–µ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–∏–π div:
//? - –ú–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π rgb –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É
//? - –†–æ–∑–º—ñ—Ä–∏ –Ω–∞–π–ø–µ—Ä—à–æ–≥–æ div ‚Äî 30px –Ω–∞ 30px
//? - –ö–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π div –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ, 
//?   –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —à–∏—Ä—à–µ —ñ –≤–∏—â–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –Ω–∞ 10px
//? üî∏ –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é destroyBoxes(), —è–∫–∞ –æ—á–∏—â–∞—î div#boxes.
//? ‚ú¥Ô∏è –í HTML —î —Ç–∞–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:
/*
<div id="controls">
    <input type="number" min="0" max="100" step="1" />
    <button type="button" data-action="render">–°—Ç–≤–æ—Ä–∏—Ç–∏</button>
    <button type="button" data-action="destroy">–û—á–∏—Å—Ç–∏—Ç–∏</button>
</div>

<div id="boxes"></div>
*/
//! –ö–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
let inputRenderingNumbers = document.querySelector('input')
let createButton = document.querySelector('[data-action="render"]')
let destroyButton = document.querySelector('[data-action="destroy"]')
let renderContainer = document.getElementById('boxes')
let infoMessage = document.getElementById('infoMessage')
infoMessage.style.display = 'none'
function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
const createBoxes = (amount) => {
    for (let o = 0; o < amount; o++) {
        renderContainer.appendChild(document.createElement('div'))
    }
    let counterDivs = 0
    const divs = [...renderContainer.children]
    divs.forEach(div => {
        counterDivs += 1
        Object.assign(div.style , {
            width: `${30 + counterDivs * 10}px`,
            height: `${30 + counterDivs * 10}px`,
            backgroundColor: getRandomColor()
        })
    });
    return renderContainer
}
const destroyBoxes = (amount) => {
    let NumberOfDivs = renderContainer.children.length
    if (amount > NumberOfDivs) {
        infoMessage.textContent = `–ë—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ ${NumberOfDivs} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ , –∞ –Ω–µ ${amount}`
        infoMessage.style.display = 'inline'
        infoMessage.classList.add("blinkEffect")
        setTimeout(() => {
            infoMessage.style.display = 'none';
        }, 4000);
    }
    for (let index = 0; index < amount; index++) {
        if (renderContainer.children.length === 0){
            return
        }
        renderContainer.removeChild(renderContainer.lastChild)
    }
}
createButton.addEventListener('click' , function(){
    createBoxes(inputRenderingNumbers.value)
})
destroyButton.addEventListener('click' , function(){
    destroyBoxes(inputRenderingNumbers.value)
})
console.log("--------------------------------------------------");
